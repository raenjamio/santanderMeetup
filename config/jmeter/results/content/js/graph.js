/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 10614.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 2.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 3.0], [4.1, 3.0], [4.2, 3.0], [4.3, 3.0], [4.4, 3.0], [4.5, 3.0], [4.6, 3.0], [4.7, 3.0], [4.8, 4.0], [4.9, 4.0], [5.0, 4.0], [5.1, 4.0], [5.2, 4.0], [5.3, 4.0], [5.4, 4.0], [5.5, 4.0], [5.6, 4.0], [5.7, 4.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 5.0], [8.0, 5.0], [8.1, 5.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 5.0], [9.5, 5.0], [9.6, 5.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 7.0], [12.6, 7.0], [12.7, 7.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 9.0], [14.2, 9.0], [14.3, 9.0], [14.4, 9.0], [14.5, 9.0], [14.6, 9.0], [14.7, 9.0], [14.8, 9.0], [14.9, 10.0], [15.0, 10.0], [15.1, 10.0], [15.2, 10.0], [15.3, 10.0], [15.4, 10.0], [15.5, 10.0], [15.6, 10.0], [15.7, 11.0], [15.8, 11.0], [15.9, 11.0], [16.0, 11.0], [16.1, 11.0], [16.2, 11.0], [16.3, 11.0], [16.4, 11.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 13.0], [17.5, 13.0], [17.6, 13.0], [17.7, 13.0], [17.8, 13.0], [17.9, 13.0], [18.0, 13.0], [18.1, 14.0], [18.2, 14.0], [18.3, 14.0], [18.4, 14.0], [18.5, 14.0], [18.6, 14.0], [18.7, 14.0], [18.8, 14.0], [18.9, 15.0], [19.0, 15.0], [19.1, 15.0], [19.2, 15.0], [19.3, 15.0], [19.4, 15.0], [19.5, 15.0], [19.6, 16.0], [19.7, 16.0], [19.8, 16.0], [19.9, 16.0], [20.0, 16.0], [20.1, 17.0], [20.2, 17.0], [20.3, 17.0], [20.4, 17.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 18.0], [20.9, 18.0], [21.0, 18.0], [21.1, 18.0], [21.2, 18.0], [21.3, 19.0], [21.4, 19.0], [21.5, 19.0], [21.6, 19.0], [21.7, 19.0], [21.8, 19.0], [21.9, 19.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 20.0], [22.4, 20.0], [22.5, 20.0], [22.6, 20.0], [22.7, 21.0], [22.8, 21.0], [22.9, 21.0], [23.0, 21.0], [23.1, 21.0], [23.2, 21.0], [23.3, 21.0], [23.4, 22.0], [23.5, 22.0], [23.6, 22.0], [23.7, 22.0], [23.8, 22.0], [23.9, 22.0], [24.0, 23.0], [24.1, 23.0], [24.2, 23.0], [24.3, 23.0], [24.4, 23.0], [24.5, 23.0], [24.6, 24.0], [24.7, 24.0], [24.8, 24.0], [24.9, 24.0], [25.0, 24.0], [25.1, 24.0], [25.2, 24.0], [25.3, 25.0], [25.4, 25.0], [25.5, 25.0], [25.6, 25.0], [25.7, 25.0], [25.8, 26.0], [25.9, 26.0], [26.0, 26.0], [26.1, 26.0], [26.2, 26.0], [26.3, 27.0], [26.4, 27.0], [26.5, 27.0], [26.6, 27.0], [26.7, 27.0], [26.8, 28.0], [26.9, 28.0], [27.0, 28.0], [27.1, 28.0], [27.2, 28.0], [27.3, 29.0], [27.4, 29.0], [27.5, 29.0], [27.6, 29.0], [27.7, 29.0], [27.8, 30.0], [27.9, 30.0], [28.0, 30.0], [28.1, 30.0], [28.2, 31.0], [28.3, 31.0], [28.4, 31.0], [28.5, 32.0], [28.6, 32.0], [28.7, 32.0], [28.8, 33.0], [28.9, 33.0], [29.0, 33.0], [29.1, 34.0], [29.2, 34.0], [29.3, 35.0], [29.4, 35.0], [29.5, 36.0], [29.6, 36.0], [29.7, 37.0], [29.8, 37.0], [29.9, 38.0], [30.0, 38.0], [30.1, 39.0], [30.2, 39.0], [30.3, 40.0], [30.4, 40.0], [30.5, 41.0], [30.6, 43.0], [30.7, 44.0], [30.8, 45.0], [30.9, 46.0], [31.0, 48.0], [31.1, 48.0], [31.2, 51.0], [31.3, 52.0], [31.4, 54.0], [31.5, 55.0], [31.6, 57.0], [31.7, 58.0], [31.8, 60.0], [31.9, 62.0], [32.0, 65.0], [32.1, 67.0], [32.2, 70.0], [32.3, 70.0], [32.4, 72.0], [32.5, 75.0], [32.6, 77.0], [32.7, 80.0], [32.8, 83.0], [32.9, 85.0], [33.0, 89.0], [33.1, 91.0], [33.2, 93.0], [33.3, 97.0], [33.4, 100.0], [33.5, 101.0], [33.6, 103.0], [33.7, 105.0], [33.8, 107.0], [33.9, 110.0], [34.0, 112.0], [34.1, 114.0], [34.2, 117.0], [34.3, 119.0], [34.4, 122.0], [34.5, 124.0], [34.6, 127.0], [34.7, 129.0], [34.8, 132.0], [34.9, 135.0], [35.0, 139.0], [35.1, 142.0], [35.2, 145.0], [35.3, 149.0], [35.4, 154.0], [35.5, 158.0], [35.6, 162.0], [35.7, 170.0], [35.8, 176.0], [35.9, 183.0], [36.0, 185.0], [36.1, 188.0], [36.2, 191.0], [36.3, 196.0], [36.4, 204.0], [36.5, 210.0], [36.6, 216.0], [36.7, 221.0], [36.8, 227.0], [36.9, 231.0], [37.0, 234.0], [37.1, 237.0], [37.2, 241.0], [37.3, 244.0], [37.4, 247.0], [37.5, 249.0], [37.6, 251.0], [37.7, 253.0], [37.8, 254.0], [37.9, 259.0], [38.0, 264.0], [38.1, 266.0], [38.2, 269.0], [38.3, 272.0], [38.4, 273.0], [38.5, 276.0], [38.6, 277.0], [38.7, 279.0], [38.8, 281.0], [38.9, 282.0], [39.0, 284.0], [39.1, 286.0], [39.2, 288.0], [39.3, 288.0], [39.4, 290.0], [39.5, 292.0], [39.6, 295.0], [39.7, 296.0], [39.8, 298.0], [39.9, 300.0], [40.0, 302.0], [40.1, 304.0], [40.2, 305.0], [40.3, 305.0], [40.4, 307.0], [40.5, 308.0], [40.6, 310.0], [40.7, 311.0], [40.8, 312.0], [40.9, 314.0], [41.0, 315.0], [41.1, 316.0], [41.2, 317.0], [41.3, 320.0], [41.4, 322.0], [41.5, 324.0], [41.6, 325.0], [41.7, 326.0], [41.8, 327.0], [41.9, 330.0], [42.0, 331.0], [42.1, 332.0], [42.2, 335.0], [42.3, 336.0], [42.4, 337.0], [42.5, 338.0], [42.6, 339.0], [42.7, 341.0], [42.8, 342.0], [42.9, 344.0], [43.0, 345.0], [43.1, 346.0], [43.2, 348.0], [43.3, 350.0], [43.4, 352.0], [43.5, 354.0], [43.6, 356.0], [43.7, 357.0], [43.8, 358.0], [43.9, 358.0], [44.0, 360.0], [44.1, 361.0], [44.2, 363.0], [44.3, 365.0], [44.4, 367.0], [44.5, 368.0], [44.6, 370.0], [44.7, 373.0], [44.8, 375.0], [44.9, 376.0], [45.0, 377.0], [45.1, 380.0], [45.2, 382.0], [45.3, 383.0], [45.4, 384.0], [45.5, 386.0], [45.6, 387.0], [45.7, 388.0], [45.8, 389.0], [45.9, 392.0], [46.0, 393.0], [46.1, 395.0], [46.2, 396.0], [46.3, 397.0], [46.4, 398.0], [46.5, 400.0], [46.6, 401.0], [46.7, 403.0], [46.8, 405.0], [46.9, 407.0], [47.0, 408.0], [47.1, 409.0], [47.2, 411.0], [47.3, 413.0], [47.4, 415.0], [47.5, 416.0], [47.6, 417.0], [47.7, 420.0], [47.8, 421.0], [47.9, 423.0], [48.0, 424.0], [48.1, 426.0], [48.2, 428.0], [48.3, 430.0], [48.4, 431.0], [48.5, 433.0], [48.6, 434.0], [48.7, 435.0], [48.8, 437.0], [48.9, 440.0], [49.0, 441.0], [49.1, 442.0], [49.2, 444.0], [49.3, 446.0], [49.4, 447.0], [49.5, 448.0], [49.6, 451.0], [49.7, 452.0], [49.8, 456.0], [49.9, 457.0], [50.0, 459.0], [50.1, 460.0], [50.2, 461.0], [50.3, 462.0], [50.4, 463.0], [50.5, 463.0], [50.6, 464.0], [50.7, 465.0], [50.8, 466.0], [50.9, 467.0], [51.0, 468.0], [51.1, 469.0], [51.2, 471.0], [51.3, 474.0], [51.4, 475.0], [51.5, 476.0], [51.6, 477.0], [51.7, 478.0], [51.8, 480.0], [51.9, 481.0], [52.0, 482.0], [52.1, 484.0], [52.2, 485.0], [52.3, 487.0], [52.4, 488.0], [52.5, 490.0], [52.6, 491.0], [52.7, 492.0], [52.8, 494.0], [52.9, 496.0], [53.0, 497.0], [53.1, 498.0], [53.2, 499.0], [53.3, 500.0], [53.4, 502.0], [53.5, 502.0], [53.6, 504.0], [53.7, 505.0], [53.8, 506.0], [53.9, 508.0], [54.0, 510.0], [54.1, 512.0], [54.2, 515.0], [54.3, 516.0], [54.4, 518.0], [54.5, 519.0], [54.6, 521.0], [54.7, 523.0], [54.8, 524.0], [54.9, 525.0], [55.0, 525.0], [55.1, 527.0], [55.2, 530.0], [55.3, 532.0], [55.4, 534.0], [55.5, 535.0], [55.6, 537.0], [55.7, 539.0], [55.8, 540.0], [55.9, 541.0], [56.0, 542.0], [56.1, 543.0], [56.2, 544.0], [56.3, 545.0], [56.4, 545.0], [56.5, 546.0], [56.6, 547.0], [56.7, 547.0], [56.8, 548.0], [56.9, 549.0], [57.0, 550.0], [57.1, 551.0], [57.2, 552.0], [57.3, 553.0], [57.4, 554.0], [57.5, 555.0], [57.6, 556.0], [57.7, 557.0], [57.8, 558.0], [57.9, 558.0], [58.0, 560.0], [58.1, 561.0], [58.2, 562.0], [58.3, 564.0], [58.4, 565.0], [58.5, 566.0], [58.6, 567.0], [58.7, 568.0], [58.8, 568.0], [58.9, 569.0], [59.0, 570.0], [59.1, 571.0], [59.2, 572.0], [59.3, 572.0], [59.4, 573.0], [59.5, 574.0], [59.6, 575.0], [59.7, 576.0], [59.8, 576.0], [59.9, 577.0], [60.0, 578.0], [60.1, 579.0], [60.2, 580.0], [60.3, 581.0], [60.4, 581.0], [60.5, 582.0], [60.6, 583.0], [60.7, 583.0], [60.8, 583.0], [60.9, 584.0], [61.0, 584.0], [61.1, 585.0], [61.2, 586.0], [61.3, 587.0], [61.4, 587.0], [61.5, 588.0], [61.6, 589.0], [61.7, 589.0], [61.8, 590.0], [61.9, 591.0], [62.0, 591.0], [62.1, 592.0], [62.2, 593.0], [62.3, 594.0], [62.4, 594.0], [62.5, 594.0], [62.6, 595.0], [62.7, 595.0], [62.8, 596.0], [62.9, 597.0], [63.0, 598.0], [63.1, 599.0], [63.2, 600.0], [63.3, 600.0], [63.4, 601.0], [63.5, 601.0], [63.6, 602.0], [63.7, 603.0], [63.8, 604.0], [63.9, 604.0], [64.0, 605.0], [64.1, 606.0], [64.2, 607.0], [64.3, 608.0], [64.4, 609.0], [64.5, 610.0], [64.6, 611.0], [64.7, 612.0], [64.8, 613.0], [64.9, 614.0], [65.0, 615.0], [65.1, 615.0], [65.2, 617.0], [65.3, 619.0], [65.4, 620.0], [65.5, 621.0], [65.6, 621.0], [65.7, 622.0], [65.8, 623.0], [65.9, 623.0], [66.0, 624.0], [66.1, 625.0], [66.2, 626.0], [66.3, 627.0], [66.4, 628.0], [66.5, 628.0], [66.6, 629.0], [66.7, 630.0], [66.8, 631.0], [66.9, 632.0], [67.0, 633.0], [67.1, 634.0], [67.2, 635.0], [67.3, 636.0], [67.4, 637.0], [67.5, 638.0], [67.6, 639.0], [67.7, 640.0], [67.8, 641.0], [67.9, 643.0], [68.0, 643.0], [68.1, 645.0], [68.2, 646.0], [68.3, 647.0], [68.4, 649.0], [68.5, 650.0], [68.6, 652.0], [68.7, 654.0], [68.8, 655.0], [68.9, 658.0], [69.0, 660.0], [69.1, 662.0], [69.2, 664.0], [69.3, 667.0], [69.4, 671.0], [69.5, 673.0], [69.6, 675.0], [69.7, 678.0], [69.8, 682.0], [69.9, 687.0], [70.0, 695.0], [70.1, 702.0], [70.2, 717.0], [70.3, 746.0], [70.4, 1711.0], [70.5, 1716.0], [70.6, 1717.0], [70.7, 1718.0], [70.8, 1719.0], [70.9, 1721.0], [71.0, 1722.0], [71.1, 1722.0], [71.2, 1723.0], [71.3, 1724.0], [71.4, 1738.0], [71.5, 1758.0], [71.6, 1771.0], [71.7, 1779.0], [71.8, 1796.0], [71.9, 1805.0], [72.0, 1842.0], [72.1, 1844.0], [72.2, 1845.0], [72.3, 1847.0], [72.4, 1848.0], [72.5, 1849.0], [72.6, 1850.0], [72.7, 2724.0], [72.8, 2741.0], [72.9, 2753.0], [73.0, 2764.0], [73.1, 2768.0], [73.2, 2776.0], [73.3, 2780.0], [73.4, 2784.0], [73.5, 2788.0], [73.6, 2796.0], [73.7, 2802.0], [73.8, 2806.0], [73.9, 2809.0], [74.0, 2815.0], [74.1, 2844.0], [74.2, 2980.0], [74.3, 2995.0], [74.4, 2996.0], [74.5, 3001.0], [74.6, 3004.0], [74.7, 3021.0], [74.8, 3042.0], [74.9, 3046.0], [75.0, 3052.0], [75.1, 3058.0], [75.2, 3063.0], [75.3, 3089.0], [75.4, 3097.0], [75.5, 3116.0], [75.6, 3135.0], [75.7, 4235.0], [75.8, 4248.0], [75.9, 4258.0], [76.0, 4264.0], [76.1, 4270.0], [76.2, 4275.0], [76.3, 4288.0], [76.4, 4297.0], [76.5, 4304.0], [76.6, 4313.0], [76.7, 5430.0], [76.8, 5496.0], [76.9, 5566.0], [77.0, 5676.0], [77.1, 5694.0], [77.2, 5702.0], [77.3, 5713.0], [77.4, 6897.0], [77.5, 6938.0], [77.6, 6942.0], [77.7, 6948.0], [77.8, 6953.0], [77.9, 6956.0], [78.0, 6958.0], [78.1, 6962.0], [78.2, 6965.0], [78.3, 6967.0], [78.4, 6975.0], [78.5, 7131.0], [78.6, 7296.0], [78.7, 7301.0], [78.8, 7304.0], [78.9, 7308.0], [79.0, 7310.0], [79.1, 7313.0], [79.2, 7314.0], [79.3, 7316.0], [79.4, 7321.0], [79.5, 7325.0], [79.6, 7328.0], [79.7, 7331.0], [79.8, 7337.0], [79.9, 7343.0], [80.0, 7349.0], [80.1, 7354.0], [80.2, 7358.0], [80.3, 7363.0], [80.4, 7366.0], [80.5, 7371.0], [80.6, 7378.0], [80.7, 7380.0], [80.8, 7384.0], [80.9, 7388.0], [81.0, 7392.0], [81.1, 7395.0], [81.2, 7398.0], [81.3, 7402.0], [81.4, 7404.0], [81.5, 7406.0], [81.6, 7410.0], [81.7, 7413.0], [81.8, 7416.0], [81.9, 7418.0], [82.0, 7420.0], [82.1, 7424.0], [82.2, 7430.0], [82.3, 7433.0], [82.4, 7440.0], [82.5, 7454.0], [82.6, 7627.0], [82.7, 8584.0], [82.8, 8590.0], [82.9, 8619.0], [83.0, 8789.0], [83.1, 8791.0], [83.2, 8793.0], [83.3, 8795.0], [83.4, 8797.0], [83.5, 8800.0], [83.6, 8803.0], [83.7, 8998.0], [83.8, 9003.0], [83.9, 9007.0], [84.0, 9010.0], [84.1, 9016.0], [84.2, 9019.0], [84.3, 9023.0], [84.4, 9026.0], [84.5, 9030.0], [84.6, 9034.0], [84.7, 9037.0], [84.8, 9040.0], [84.9, 9053.0], [85.0, 9058.0], [85.1, 9092.0], [85.2, 9098.0], [85.3, 9105.0], [85.4, 9111.0], [85.5, 9115.0], [85.6, 9119.0], [85.7, 9124.0], [85.8, 9129.0], [85.9, 9133.0], [86.0, 9136.0], [86.1, 9141.0], [86.2, 9145.0], [86.3, 9149.0], [86.4, 9177.0], [86.5, 9182.0], [86.6, 9185.0], [86.7, 9193.0], [86.8, 9200.0], [86.9, 9203.0], [87.0, 9205.0], [87.1, 9210.0], [87.2, 9219.0], [87.3, 9224.0], [87.4, 9233.0], [87.5, 9239.0], [87.6, 9244.0], [87.7, 9281.0], [87.8, 9285.0], [87.9, 9289.0], [88.0, 9293.0], [88.1, 9297.0], [88.2, 9300.0], [88.3, 9305.0], [88.4, 9310.0], [88.5, 9313.0], [88.6, 9316.0], [88.7, 9321.0], [88.8, 9324.0], [88.9, 9332.0], [89.0, 9348.0], [89.1, 9359.0], [89.2, 9362.0], [89.3, 9368.0], [89.4, 9371.0], [89.5, 9375.0], [89.6, 9376.0], [89.7, 9380.0], [89.8, 9382.0], [89.9, 9384.0], [90.0, 9385.0], [90.1, 9387.0], [90.2, 9390.0], [90.3, 9391.0], [90.4, 9394.0], [90.5, 9396.0], [90.6, 9398.0], [90.7, 9400.0], [90.8, 9402.0], [90.9, 9404.0], [91.0, 9405.0], [91.1, 9406.0], [91.2, 9407.0], [91.3, 9408.0], [91.4, 9409.0], [91.5, 9411.0], [91.6, 9411.0], [91.7, 9413.0], [91.8, 9415.0], [91.9, 9417.0], [92.0, 9419.0], [92.1, 9421.0], [92.2, 9422.0], [92.3, 9427.0], [92.4, 9430.0], [92.5, 9432.0], [92.6, 9435.0], [92.7, 9445.0], [92.8, 9465.0], [92.9, 9471.0], [93.0, 9474.0], [93.1, 9478.0], [93.2, 9479.0], [93.3, 9483.0], [93.4, 9486.0], [93.5, 9489.0], [93.6, 9494.0], [93.7, 9496.0], [93.8, 9501.0], [93.9, 9505.0], [94.0, 9507.0], [94.1, 9510.0], [94.2, 9512.0], [94.3, 9514.0], [94.4, 9518.0], [94.5, 9522.0], [94.6, 9524.0], [94.7, 9528.0], [94.8, 9532.0], [94.9, 9537.0], [95.0, 9538.0], [95.1, 9541.0], [95.2, 9544.0], [95.3, 9548.0], [95.4, 9552.0], [95.5, 9556.0], [95.6, 9558.0], [95.7, 9562.0], [95.8, 9569.0], [95.9, 9573.0], [96.0, 9577.0], [96.1, 9584.0], [96.2, 9588.0], [96.3, 9590.0], [96.4, 9593.0], [96.5, 9614.0], [96.6, 9617.0], [96.7, 9620.0], [96.8, 9621.0], [96.9, 9622.0], [97.0, 9623.0], [97.1, 9624.0], [97.2, 9625.0], [97.3, 9627.0], [97.4, 9630.0], [97.5, 9633.0], [97.6, 9636.0], [97.7, 9640.0], [97.8, 9643.0], [97.9, 9663.0], [98.0, 9665.0], [98.1, 9668.0], [98.2, 9671.0], [98.3, 9672.0], [98.4, 9674.0], [98.5, 9676.0], [98.6, 9678.0], [98.7, 9695.0], [98.8, 9722.0], [98.9, 9725.0], [99.0, 9729.0], [99.1, 9732.0], [99.2, 9735.0], [99.3, 9762.0], [99.4, 9775.0], [99.5, 10576.0], [99.6, 10580.0], [99.7, 10610.0], [99.8, 10610.0], [99.9, 10612.0], [100.0, 10614.0]], "isOverall": false, "label": "create ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3340.0, "series": [{"data": [[0.0, 3340.0], [600.0, 686.0], [700.0, 26.0], [1600.0, 5.0], [1700.0, 146.0], [1800.0, 84.0], [2700.0, 99.0], [2800.0, 53.0], [2900.0, 29.0], [3000.0, 96.0], [3100.0, 22.0], [4200.0, 81.0], [4300.0, 17.0], [4700.0, 1.0], [5400.0, 17.0], [5500.0, 15.0], [5600.0, 20.0], [5700.0, 19.0], [5800.0, 3.0], [6100.0, 1.0], [6900.0, 105.0], [6800.0, 2.0], [7000.0, 3.0], [7100.0, 1.0], [7400.0, 134.0], [7300.0, 254.0], [7200.0, 16.0], [7500.0, 4.0], [7600.0, 5.0], [7700.0, 2.0], [8400.0, 2.0], [8500.0, 17.0], [8700.0, 52.0], [8600.0, 10.0], [9200.0, 138.0], [9100.0, 157.0], [9000.0, 151.0], [8800.0, 20.0], [8900.0, 5.0], [9600.0, 224.0], [9700.0, 75.0], [9500.0, 273.0], [9400.0, 307.0], [9300.0, 250.0], [10500.0, 19.0], [10600.0, 35.0], [100.0, 294.0], [200.0, 351.0], [300.0, 663.0], [400.0, 673.0], [500.0, 998.0]], "isOverall": false, "label": "create ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1700.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5331.0, "series": [{"data": [[0.0, 5331.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1700.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2969.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 718.3088000000018, "minX": 1.59814284E12, "maxY": 718.3088000000018, "series": [{"data": [[1.59814284E12, 718.3088000000018]], "isOverall": false, "label": "Thread Create meetup", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59814284E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.8484848484848486, "minX": 1.0, "maxY": 9768.0, "series": [{"data": [[2.0, 3.8484848484848486], [3.0, 5.96551724137931], [4.0, 4.641025641025641], [5.0, 7.45378151260504], [6.0, 6.123893805309738], [7.0, 7.312056737588651], [8.0, 7.087591240875914], [9.0, 7.367924528301886], [10.0, 10.539130434782606], [11.0, 13.162393162393158], [12.0, 10.63366336633663], [13.0, 14.064814814814808], [14.0, 11.669902912621358], [15.0, 18.716049382716047], [16.0, 13.77], [17.0, 14.409638554216862], [18.0, 18.679487179487182], [19.0, 16.543209876543205], [20.0, 19.61728395061728], [21.0, 19.83582089552239], [22.0, 19.081395348837205], [23.0, 15.871428571428572], [24.0, 18.50847457627119], [25.0, 17.388888888888896], [26.0, 18.53125], [27.0, 20.63414634146342], [28.0, 23.661016949152543], [29.0, 19.699999999999996], [30.0, 22.085714285714293], [31.0, 15.813953488372093], [33.0, 24.877551020408156], [32.0, 14.827586206896552], [35.0, 21.742857142857144], [34.0, 20.826086956521735], [37.0, 37.696969696969695], [36.0, 22.378378378378375], [39.0, 28.46666666666666], [38.0, 25.0], [40.0, 40.93749999999999], [41.0, 20.92857142857143], [42.0, 62.00000000000001], [43.0, 23.434782608695652], [45.0, 36.642857142857146], [44.0, 60.0], [46.0, 57.73333333333332], [47.0, 19.916666666666664], [49.0, 57.25], [48.0, 48.06666666666668], [51.0, 33.92307692307692], [50.0, 28.526315789473685], [53.0, 41.81481481481482], [52.0, 49.87500000000001], [55.0, 40.38461538461539], [54.0, 48.833333333333336], [56.0, 74.25], [57.0, 61.0], [58.0, 49.5], [59.0, 37.0], [60.0, 48.809523809523824], [61.0, 58.25], [62.0, 83.14285714285714], [63.0, 31.500000000000007], [67.0, 160.0], [66.0, 23.375], [64.0, 65.92307692307692], [65.0, 59.6], [70.0, 206.13636363636363], [69.0, 64.375], [68.0, 60.33333333333333], [71.0, 231.2881355932203], [73.0, 176.71428571428572], [74.0, 136.33333333333334], [75.0, 80.5], [72.0, 188.0], [79.0, 93.75], [78.0, 174.62500000000003], [77.0, 151.83333333333331], [76.0, 208.0], [83.0, 178.5], [80.0, 178.0], [81.0, 142.75], [82.0, 339.0], [87.0, 117.8], [85.0, 200.62500000000003], [84.0, 189.5], [86.0, 206.4], [90.0, 79.33333333333333], [89.0, 73.42857142857142], [91.0, 124.8], [88.0, 202.0], [95.0, 115.4], [94.0, 123.66666666666667], [93.0, 96.5], [96.0, 176.5], [99.0, 93.5], [97.0, 88.22222222222223], [98.0, 114.0], [102.0, 138.5], [101.0, 118.24999999999999], [100.0, 83.0], [103.0, 97.5], [107.0, 205.5], [105.0, 132.0], [104.0, 175.0], [106.0, 116.0], [111.0, 147.29999999999998], [110.0, 150.83333333333334], [108.0, 98.5], [109.0, 226.28571428571428], [115.0, 143.77777777777777], [114.0, 121.0], [112.0, 119.33333333333333], [113.0, 180.70000000000002], [116.0, 165.44444444444446], [119.0, 221.625], [118.0, 85.5], [117.0, 124.25], [121.0, 99.4], [123.0, 170.6], [120.0, 102.0], [122.0, 184.0], [127.0, 108.125], [125.0, 170.4], [124.0, 224.6], [126.0, 149.45454545454547], [135.0, 208.5], [134.0, 126.5], [130.0, 112.0], [129.0, 110.71428571428572], [133.0, 165.75], [131.0, 231.49999999999997], [128.0, 122.0], [132.0, 36.666666666666664], [143.0, 243.0], [141.0, 139.69230769230768], [138.0, 170.5], [137.0, 110.5], [136.0, 137.16666666666669], [142.0, 258.0], [139.0, 367.5], [151.0, 121.2], [147.0, 133.6], [146.0, 236.6], [145.0, 248.25], [144.0, 81.33333333333333], [149.0, 104.0], [150.0, 105.0], [159.0, 231.0], [158.0, 277.33333333333337], [156.0, 317.0], [153.0, 133.8], [152.0, 184.0], [154.0, 87.75], [157.0, 379.0], [167.0, 150.33333333333334], [166.0, 203.0], [165.0, 283.0], [164.0, 272.0], [162.0, 191.0], [163.0, 388.3333333333333], [175.0, 234.62500000000003], [174.0, 127.0], [173.0, 146.66666666666666], [172.0, 151.0], [170.0, 229.0], [169.0, 396.0], [168.0, 320.33333333333337], [183.0, 266.5], [182.0, 230.0], [181.0, 206.0], [180.0, 153.0], [179.0, 129.0], [177.0, 132.0], [178.0, 444.0], [176.0, 253.0], [190.0, 389.0], [189.0, 317.0], [186.0, 343.0], [185.0, 476.0], [199.0, 382.0], [198.0, 422.3333333333333], [197.0, 474.0], [195.0, 441.6666666666667], [194.0, 279.0], [192.0, 479.0], [205.0, 2834.1573604060914], [207.0, 484.0], [206.0, 540.0], [203.0, 347.5], [201.0, 393.0], [200.0, 420.0], [214.0, 394.0], [212.0, 511.0], [211.0, 446.0], [210.0, 411.0], [222.0, 488.6666666666667], [218.0, 441.5], [227.0, 485.6], [226.0, 369.0], [225.0, 446.5], [238.0, 523.0], [240.0, 450.0], [255.0, 418.5], [253.0, 528.5], [252.0, 459.0], [251.0, 491.0], [270.0, 501.0], [271.0, 463.0], [267.0, 481.0], [265.0, 469.0], [264.0, 518.0], [260.0, 490.0], [258.0, 551.0], [287.0, 326.0], [283.0, 372.0], [282.0, 557.0], [280.0, 531.0], [279.0, 493.3333333333333], [277.0, 518.0], [274.0, 450.0], [273.0, 475.0], [272.0, 420.5], [303.0, 320.5], [300.0, 308.0], [296.0, 296.0], [295.0, 331.6666666666667], [294.0, 324.0], [292.0, 345.0], [288.0, 317.0], [319.0, 284.0], [318.0, 452.0], [314.0, 332.0], [311.0, 295.0], [310.0, 327.3333333333333], [306.0, 322.0], [305.0, 328.3333333333333], [304.0, 346.5], [332.0, 244.75], [335.0, 273.0], [334.0, 320.0], [331.0, 292.0], [329.0, 252.0], [328.0, 256.0], [327.0, 397.0], [320.0, 296.6666666666667], [326.0, 343.0], [325.0, 337.75], [339.0, 489.5], [349.0, 304.4], [348.0, 470.75], [346.0, 364.0], [345.0, 231.0], [347.0, 321.0], [344.0, 306.0], [351.0, 282.3333333333333], [350.0, 276.6666666666667], [343.0, 315.6666666666667], [342.0, 574.0], [341.0, 281.0], [340.0, 523.0], [338.0, 344.0], [336.0, 350.375], [337.0, 484.0], [355.0, 441.42857142857144], [365.0, 433.0], [367.0, 468.77777777777777], [360.0, 358.75], [366.0, 407.2], [364.0, 390.5], [362.0, 459.5], [363.0, 424.1666666666667], [361.0, 358.7142857142857], [359.0, 435.5882352941176], [356.0, 493.5], [358.0, 338.6666666666667], [357.0, 441.57142857142856], [354.0, 320.15384615384613], [352.0, 364.2], [353.0, 354.75], [382.0, 423.3333333333333], [380.0, 418.3333333333333], [381.0, 412.2857142857143], [371.0, 347.8571428571429], [369.0, 391.1111111111111], [370.0, 381.33333333333337], [368.0, 444.0], [375.0, 481.16666666666663], [379.0, 416.14285714285717], [378.0, 479.375], [377.0, 338.75], [376.0, 440.37499999999994], [383.0, 442.375], [374.0, 367.0], [373.0, 425.0], [372.0, 423.55555555555554], [387.0, 510.5], [399.0, 435.2], [398.0, 443.2], [397.0, 415.75], [396.0, 378.1428571428571], [386.0, 449.5454545454545], [384.0, 402.2], [385.0, 466.0], [395.0, 409.0], [394.0, 382.3636363636363], [393.0, 402.375], [392.0, 482.00000000000006], [391.0, 462.0], [390.0, 423.16666666666663], [389.0, 464.6666666666667], [388.0, 432.33333333333326], [414.0, 494.125], [415.0, 444.3333333333333], [408.0, 429.5], [413.0, 472.5], [410.0, 378.0], [409.0, 469.7058823529411], [406.0, 406.0], [403.0, 456.75], [402.0, 458.33333333333337], [401.0, 383.75], [400.0, 499.1666666666667], [407.0, 434.57142857142856], [412.0, 589.0], [411.0, 557.8571428571429], [405.0, 606.1111111111111], [404.0, 365.5], [431.0, 469.25], [429.0, 481.14285714285717], [428.0, 590.0], [419.0, 574.0], [430.0, 485.75], [418.0, 532.875], [417.0, 470.0], [416.0, 465.625], [427.0, 535.6], [426.0, 502.4], [425.0, 553.5], [424.0, 484.0], [423.0, 430.6666666666667], [421.0, 508.2], [422.0, 549.4], [420.0, 503.5], [447.0, 531.1111111111112], [446.0, 533.0769230769231], [445.0, 555.8333333333333], [443.0, 543.4], [442.0, 539.6666666666667], [441.0, 536.5714285714287], [440.0, 539.8888888888889], [439.0, 520.2307692307693], [434.0, 523.0], [433.0, 563.25], [435.0, 549.8], [432.0, 520.9230769230769], [444.0, 548.2727272727273], [438.0, 499.0], [437.0, 479.25], [436.0, 570.2], [461.0, 492.6666666666667], [462.0, 566.3333333333334], [460.0, 497.75], [451.0, 525.6666666666666], [449.0, 502.62500000000006], [448.0, 514.5], [450.0, 625.5], [459.0, 501.3333333333333], [458.0, 462.25], [456.0, 504.6666666666667], [457.0, 547.8333333333334], [463.0, 593.8], [455.0, 515.4], [454.0, 453.75], [453.0, 493.6], [452.0, 512.3333333333334], [477.0, 520.0714285714286], [478.0, 517.5], [476.0, 468.83333333333337], [474.0, 508.33333333333337], [475.0, 534.75], [473.0, 518.75], [472.0, 462.6666666666667], [479.0, 517.0], [470.0, 467.5], [468.0, 553.75], [469.0, 484.2], [467.0, 534.6], [466.0, 519.1428571428572], [465.0, 470.875], [471.0, 613.0], [464.0, 603.0], [492.0, 444.5], [494.0, 367.0], [495.0, 425.4], [493.0, 485.0], [490.0, 462.0], [489.0, 439.0], [487.0, 446.0], [481.0, 383.0], [480.0, 521.1666666666666], [483.0, 426.0], [482.0, 424.0], [486.0, 461.0], [485.0, 434.0], [484.0, 433.0], [510.0, 377.6153846153846], [511.0, 353.5], [509.0, 359.0], [508.0, 413.0], [507.0, 395.375], [506.0, 407.0], [505.0, 401.00000000000006], [503.0, 399.375], [496.0, 415.25], [498.0, 424.6666666666667], [499.0, 472.0], [497.0, 434.0], [504.0, 405.75], [502.0, 399.0], [501.0, 422.2857142857143], [500.0, 414.42857142857144], [537.0, 372.6], [542.0, 294.6], [543.0, 422.2], [529.0, 364.5454545454545], [528.0, 359.3999999999999], [533.0, 331.09090909090907], [531.0, 420.22222222222223], [532.0, 430.7142857142857], [530.0, 365.66666666666663], [541.0, 296.8888888888889], [540.0, 429.83333333333337], [539.0, 350.5], [536.0, 339.23076923076917], [518.0, 415.0], [519.0, 417.7], [517.0, 403.92857142857133], [516.0, 321.4166666666667], [514.0, 387.5], [515.0, 370.625], [513.0, 353.54545454545456], [512.0, 345.6], [527.0, 341.41666666666663], [526.0, 371.7058823529411], [525.0, 427.6], [524.0, 369.70000000000005], [522.0, 485.42105263157913], [523.0, 410.875], [520.0, 531.3666666666666], [521.0, 391.55555555555554], [535.0, 334.4], [538.0, 377.7142857142857], [534.0, 411.5], [549.0, 379.16666666666663], [546.0, 272.0], [547.0, 327.0], [552.0, 317.79999999999995], [554.0, 336.90000000000003], [555.0, 481.0], [553.0, 355.7142857142858], [557.0, 325.6666666666667], [556.0, 350.0], [558.0, 461.72727272727275], [559.0, 479.875], [551.0, 282.0], [550.0, 369.8], [568.0, 539.875], [548.0, 280.42857142857144], [545.0, 324.0], [544.0, 338.8], [570.0, 496.75], [572.0, 568.8750000000001], [571.0, 581.4], [574.0, 509.8181818181818], [573.0, 525.3636363636364], [560.0, 460.47619047619037], [575.0, 495.09999999999997], [562.0, 525.0], [563.0, 555.0000000000001], [561.0, 448.0], [565.0, 482.38461538461536], [564.0, 462.8888888888889], [567.0, 455.1600000000001], [566.0, 404.38461538461536], [569.0, 440.42105263157896], [602.0, 610.0], [582.0, 556.8333333333334], [581.0, 478.4615384615385], [583.0, 549.25], [601.0, 635.8], [600.0, 614.3333333333334], [580.0, 555.2222222222222], [579.0, 530.3636363636364], [578.0, 626.1666666666666], [576.0, 614.3], [577.0, 630.0], [591.0, 613.375], [590.0, 579.888888888889], [589.0, 629.0], [588.0, 629.0], [587.0, 625.2857142857142], [586.0, 589.1428571428572], [584.0, 627.375], [585.0, 617.0], [607.0, 632.0], [606.0, 601.75], [593.0, 638.9090909090909], [592.0, 610.6], [595.0, 583.5], [596.0, 596.75], [594.0, 652.5], [599.0, 606.3333333333335], [598.0, 581.0], [597.0, 617.0], [605.0, 621.25], [603.0, 617.3333333333334], [604.0, 599.0], [633.0, 624.2857142857143], [638.0, 601.0], [639.0, 635.3333333333334], [625.0, 588.0], [624.0, 616.0], [629.0, 607.0], [626.0, 715.0], [636.0, 595.4], [635.0, 598.25], [634.0, 590.8333333333334], [632.0, 614.5], [615.0, 623.0], [614.0, 622.0], [613.0, 622.3333333333334], [612.0, 661.0], [610.0, 640.0], [611.0, 613.5], [609.0, 638.1111111111111], [608.0, 617.75], [623.0, 609.0], [622.0, 589.0], [620.0, 599.5], [618.0, 600.3333333333334], [617.0, 610.6666666666666], [616.0, 605.0], [630.0, 600.4], [631.0, 721.0], [637.0, 589.0], [668.0, 647.4], [657.0, 581.3333333333333], [662.0, 591.3333333333334], [661.0, 624.5], [663.0, 626.7272727272726], [660.0, 617.0], [659.0, 613.1666666666666], [658.0, 661.5], [656.0, 581.8888888888889], [671.0, 646.1428571428572], [670.0, 654.6], [669.0, 628.7142857142857], [667.0, 643.0], [666.0, 612.0], [665.0, 641.875], [664.0, 628.8888888888889], [647.0, 591.5], [646.0, 679.0], [645.0, 636.0], [644.0, 648.5], [643.0, 657.25], [641.0, 653.2], [640.0, 611.5], [642.0, 645.0], [655.0, 626.4545454545455], [654.0, 594.5], [653.0, 608.3], [652.0, 618.625], [649.0, 610.9999999999999], [648.0, 627.0], [650.0, 628.0], [651.0, 608.0], [697.0, 583.2], [702.0, 578.0], [703.0, 592.0], [688.0, 636.5], [690.0, 621.2], [689.0, 623.1666666666667], [692.0, 600.0], [693.0, 630.8], [691.0, 616.0], [701.0, 602.75], [699.0, 585.5], [698.0, 606.0], [700.0, 594.5], [696.0, 619.3333333333334], [679.0, 643.75], [678.0, 622.6], [677.0, 607.2], [676.0, 623.6], [675.0, 609.2], [674.0, 612.0], [673.0, 623.25], [672.0, 608.0], [687.0, 617.25], [686.0, 614.4285714285714], [685.0, 607.5], [684.0, 611.8], [683.0, 629.6666666666666], [682.0, 610.6999999999999], [680.0, 630.2857142857143], [695.0, 602.8], [694.0, 609.0], [709.0, 562.6666666666666], [735.0, 571.0], [732.0, 542.0], [710.0, 581.0], [711.0, 572.0], [722.0, 557.0], [720.0, 584.0], [721.0, 611.0], [719.0, 599.3333333333334], [715.0, 555.8], [716.0, 605.0], [714.0, 560.4], [713.0, 600.6666666666666], [712.0, 587.0], [705.0, 575.75], [704.0, 564.0], [706.0, 556.2], [707.0, 569.1666666666667], [708.0, 581.0], [765.0, 585.0], [767.0, 521.5], [766.0, 569.0], [753.0, 552.3333333333334], [752.0, 543.0], [754.0, 478.6666666666667], [755.0, 525.6666666666666], [764.0, 397.0], [763.0, 510.75], [762.0, 607.5], [760.0, 463.0], [737.0, 526.0], [751.0, 555.0], [747.0, 576.5], [745.0, 525.0], [744.0, 542.0], [761.0, 569.0], [759.0, 584.6666666666666], [758.0, 623.0], [757.0, 609.6666666666666], [756.0, 481.5], [795.0, 516.4375000000001], [785.0, 579.75], [797.0, 549.2857142857143], [799.0, 498.37499999999994], [798.0, 553.6666666666667], [784.0, 527.8], [796.0, 531.7647058823529], [792.0, 540.7142857142857], [775.0, 470.0], [774.0, 533.0], [773.0, 467.0], [772.0, 568.8], [771.0, 545.6666666666666], [770.0, 548.5555555555555], [769.0, 572.5], [768.0, 591.0], [794.0, 516.0909090909091], [793.0, 464.4], [783.0, 554.5714285714287], [781.0, 559.5714285714286], [782.0, 540.0], [780.0, 541.8571428571428], [779.0, 532.3333333333334], [778.0, 555.8571428571429], [777.0, 593.0], [776.0, 531.4], [791.0, 540.5], [790.0, 551.0], [789.0, 461.7142857142857], [788.0, 561.3333333333334], [786.0, 541.125], [787.0, 467.0], [829.0, 534.9999999999999], [820.0, 524.8333333333333], [831.0, 548.125], [830.0, 557.5], [816.0, 573.875], [818.0, 539.4166666666666], [819.0, 524.4444444444445], [817.0, 509.28571428571433], [826.0, 570.2499999999999], [828.0, 597.5], [827.0, 536.0], [825.0, 510.0769230769231], [824.0, 562.4545454545455], [807.0, 508.8], [806.0, 574.3333333333334], [805.0, 518.875], [804.0, 526.6666666666666], [803.0, 562.7142857142857], [802.0, 547.4000000000001], [801.0, 505.8124999999999], [800.0, 567.1666666666666], [815.0, 556.125], [813.0, 523.2307692307693], [812.0, 560.7777777777778], [810.0, 576.3125], [809.0, 545.1666666666666], [808.0, 504.8], [811.0, 493.8823529411764], [814.0, 519.5555555555555], [823.0, 549.4285714285714], [822.0, 564.6], [821.0, 543.7], [857.0, 620.6666666666666], [861.0, 681.0], [863.0, 643.0], [848.0, 620.0], [851.0, 576.5], [849.0, 594.0], [860.0, 632.6666666666666], [859.0, 596.0], [858.0, 644.0], [847.0, 580.5], [832.0, 613.0], [835.0, 594.25], [834.0, 510.1428571428572], [833.0, 569.375], [837.0, 560.5], [836.0, 583.5], [839.0, 524.5], [838.0, 626.0], [845.0, 589.0], [844.0, 585.0], [843.0, 570.5], [842.0, 534.25], [840.0, 576.5999999999999], [841.0, 622.5], [855.0, 591.5], [854.0, 630.0], [853.0, 666.0], [852.0, 611.0], [867.0, 663.5], [866.0, 639.5], [865.0, 642.5], [1022.0, 9276.5], [1014.0, 9264.0], [1011.0, 9033.0], [1082.0, 9394.0], [1058.0, 9402.0], [1060.0, 9409.0], [1064.0, 9416.5], [1084.0, 9447.0], [1074.0, 9424.0], [1072.0, 9421.0], [1038.0, 9437.0], [1034.0, 9447.0], [1054.0, 9421.0], [1050.0, 9404.0], [1046.0, 9418.0], [1044.0, 9439.0], [1042.0, 9443.0], [1068.0, 9429.0], [1150.0, 9320.0], [1142.0, 9386.5], [1128.0, 9357.0], [1144.0, 9353.333333333334], [1146.0, 9339.0], [1120.0, 9399.5], [1122.0, 9410.666666666666], [1124.0, 9402.0], [1126.0, 9362.5], [1140.0, 9412.0], [1136.0, 9415.0], [1138.0, 9406.0], [1130.0, 9399.0], [1118.0, 9395.5], [1114.0, 9401.0], [1108.0, 9412.0], [1132.0, 9395.0], [1134.0, 9411.0], [1208.0, 9311.0], [1202.0, 9310.0], [1214.0, 9311.0], [1184.0, 9334.0], [1188.0, 9316.0], [1186.0, 9320.0], [1212.0, 9309.0], [1200.0, 9328.0], [1162.0, 9387.0], [1158.0, 9353.5], [1154.0, 9368.666666666666], [1156.0, 9398.0], [1152.0, 9330.0], [1180.0, 9358.5], [1176.0, 9384.0], [1172.0, 9387.0], [1170.0, 9324.0], [1168.0, 9351.666666666666], [1256.0, 9211.666666666668], [1260.0, 9256.999999999998], [1262.0, 9113.96739130435], [1258.0, 9209.646153846154], [1268.0, 8007.444444444443], [1266.0, 8819.916666666668], [1264.0, 8969.6], [1228.0, 9300.0], [1224.0, 9295.5], [1216.0, 9309.5], [1246.0, 9292.0], [1242.0, 9291.333333333334], [1234.0, 9296.0], [1232.0, 9300.5], [1330.0, 9361.0], [1332.0, 9367.666666666666], [1334.0, 9368.6], [1338.0, 9377.666666666666], [1340.0, 9370.25], [1342.0, 9376.0], [1348.0, 9369.0], [1400.0, 9411.0], [1380.0, 9392.0], [1386.0, 9402.0], [1384.0, 9435.0], [1406.0, 9417.0], [1398.0, 9412.0], [1344.0, 9364.5], [1372.0, 9394.0], [1374.0, 9410.0], [1370.0, 9398.0], [1368.0, 9399.8], [1366.0, 9392.75], [1364.0, 9383.5], [1362.0, 9406.0], [1360.0, 9407.0], [1346.0, 9391.5], [1350.0, 9386.833333333334], [1352.0, 9376.666666666666], [1354.0, 9379.0], [1356.0, 9388.666666666666], [1358.0, 9383.5], [1390.0, 9384.0], [1442.0, 9438.0], [1440.0, 9414.0], [1448.0, 9378.0], [1446.0, 9439.0], [1444.0, 9409.125], [1468.0, 9413.0], [1466.0, 9436.0], [1464.0, 9440.333333333334], [1460.0, 9408.5], [1416.0, 9402.0], [1418.0, 9386.0], [1420.0, 9395.6], [1412.0, 9408.0], [1424.0, 9399.0], [1426.0, 9394.8], [1430.0, 9392.0], [1438.0, 9418.0], [1436.0, 9381.0], [1454.0, 9485.0], [1522.0, 5510.0], [1510.0, 9442.0], [1506.0, 9435.0], [1526.0, 9476.0], [1472.0, 9402.0], [1476.0, 9447.25], [1482.0, 9430.0], [1480.0, 8348.666666666666], [1478.0, 9417.0], [1502.0, 7470.0], [1496.0, 9486.0], [1490.0, 9407.0], [1514.0, 9422.0], [1568.0, 9411.0], [1592.0, 7490.5], [1572.0, 7499.0], [1574.0, 9413.5], [1578.0, 9415.0], [1582.0, 7461.5], [1594.0, 9487.5], [1590.0, 7484.0], [1586.0, 9461.0], [1584.0, 9503.0], [1566.0, 9412.0], [1544.0, 5508.0], [1550.0, 9431.75], [1548.0, 9512.0], [1564.0, 7466.5], [1562.0, 9465.0], [1560.0, 9423.0], [1558.0, 2843.0], [1552.0, 9449.25], [1634.0, 9491.0], [1654.0, 9478.0], [1662.0, 9487.5], [1632.0, 9103.0], [1636.0, 9505.5], [1638.0, 7525.666666666667], [1640.0, 9478.0], [1642.0, 9464.0], [1658.0, 9479.0], [1650.0, 9478.0], [1648.0, 9498.666666666666], [1614.0, 9472.0], [1604.0, 9485.0], [1602.0, 8147.333333333333], [1622.0, 9462.0], [1618.0, 9466.5], [1616.0, 9473.0], [1700.0, 9507.5], [1722.0, 8978.57142857143], [1726.0, 9620.0], [1696.0, 9461.0], [1702.0, 9512.0], [1704.0, 8681.6], [1706.0, 9548.0], [1708.0, 9494.25], [1710.0, 9492.666666666666], [1724.0, 9521.888888888889], [1720.0, 9751.560606060613], [1718.0, 8485.75], [1716.0, 9504.5], [1714.0, 9502.333333333334], [1666.0, 6999.5], [1762.0, 9624.0], [1790.0, 9627.0], [1768.0, 9623.0], [1766.0, 9623.0], [1772.0, 9624.0], [1774.0, 9624.0], [1788.0, 9626.0], [1786.0, 9625.75], [1784.0, 9624.0], [1782.0, 9624.0], [1780.0, 9625.5], [1776.0, 9623.333333333334], [1742.0, 9621.0], [1734.0, 9621.333333333334], [1732.0, 9623.0], [1728.0, 9723.0], [1756.0, 9622.0], [1802.0, 9631.0], [1852.0, 9667.5], [1832.0, 9663.5], [1836.0, 9664.0], [1848.0, 9666.5], [1844.0, 9667.0], [1842.0, 9665.0], [1804.0, 9636.0], [1800.0, 9631.0], [1798.0, 9630.0], [1796.0, 9630.0], [1794.0, 9628.0], [1792.0, 9629.5], [1822.0, 9643.0], [1820.0, 9643.5], [1818.0, 9642.5], [1816.0, 9642.0], [1812.0, 9640.5], [1810.0, 9640.0], [1838.0, 9664.333333333334], [1910.0, 9676.0], [1888.0, 9673.5], [1890.0, 9674.0], [1898.0, 9676.0], [1906.0, 9678.0], [1862.0, 9672.0], [1858.0, 9671.0], [1886.0, 9672.5], [1884.0, 9671.5], [1880.0, 9670.0], [1876.0, 9671.0], [1874.0, 9671.0], [1900.0, 9676.5], [1952.0, 6952.666666666667], [1978.0, 6961.5], [1954.0, 6924.0], [1956.0, 6971.0], [1960.0, 6953.0], [1962.0, 6947.5], [1980.0, 7048.0], [1976.0, 6959.2], [1972.0, 6959.5], [1950.0, 6949.5], [1920.0, 9705.8], [1922.0, 9731.0], [1926.0, 9737.25], [1928.0, 5429.0], [1934.0, 5419.5], [1930.0, 5430.0], [1966.0, 7076.0], [1964.0, 7072.333333333333], [1986.0, 7141.0], [2014.0, 6956.0], [1994.0, 7178.6], [1990.0, 6965.0], [1988.0, 6970.0], [2020.0, 6957.0], [2006.0, 6969.0], [2004.0, 6969.0], [2002.0, 6965.0], [2172.0, 7339.0], [2112.0, 7319.0], [2124.0, 7324.333333333333], [2128.0, 7306.5], [2140.0, 7315.0], [2168.0, 7315.0], [2160.0, 7330.0], [2156.0, 7346.0], [2152.0, 7322.0], [2076.0, 6955.0], [2072.0, 7040.4], [2108.0, 7186.333333333333], [2088.0, 7298.0], [2280.0, 7393.6], [2252.0, 7374.0], [2256.0, 7377.0], [2260.0, 7366.5], [2264.0, 7380.0], [2268.0, 7383.0], [2300.0, 7411.0], [2296.0, 7424.0], [2288.0, 7403.75], [2284.0, 7395.0], [2276.0, 7404.0], [2272.0, 7387.777777777777], [2176.0, 7332.0], [2180.0, 7332.0], [2196.0, 7316.0], [2232.0, 7400.0], [2228.0, 7346.5], [2216.0, 7337.5], [2212.0, 7341.0], [2208.0, 7374.0], [2308.0, 7401.5], [2304.0, 7400.0], [2312.0, 7402.5], [2320.0, 7417.0], [2348.0, 7441.0], [2344.0, 7431.0], [2688.0, 1773.4192139738002], [2117.0, 7340.0], [2169.0, 7352.0], [2121.0, 7304.0], [2125.0, 7072.5], [2133.0, 7313.0], [2137.0, 7326.333333333333], [2141.0, 7315.0], [2153.0, 7361.0], [2149.0, 7309.666666666667], [2145.0, 7317.0], [2069.0, 7121.0], [2109.0, 7132.0], [2097.0, 6951.0], [2093.0, 6961.0], [2085.0, 7317.0], [2081.0, 7206.0], [2161.0, 7331.0], [2297.0, 7416.0], [2245.0, 7370.5], [2257.0, 7364.0], [2261.0, 7374.0], [2269.0, 7375.333333333333], [2285.0, 7417.0], [2277.0, 7393.125], [2237.0, 7332.0], [2181.0, 7324.0], [2233.0, 7390.0], [2229.0, 7362.0], [2221.0, 7364.5], [2213.0, 7359.75], [2209.0, 7343.333333333333], [2329.0, 7416.0], [2305.0, 7408.5], [2333.0, 7411.5], [2353.0, 7438.0], [2349.0, 7438.666666666667], [2341.0, 7431.0], [2337.0, 7421.0], [2797.0, 2843.7093596059094], [1085.0, 9415.0], [1087.0, 9418.0], [1063.0, 9411.0], [1065.0, 9406.0], [1077.0, 9416.0], [1073.0, 9405.0], [1055.0, 9403.0], [1027.0, 9301.0], [1033.0, 9406.0], [1029.0, 9396.0], [1047.0, 9424.0], [1067.0, 9418.5], [1149.0, 9357.0], [1147.0, 9349.333333333334], [1151.0, 9330.0], [1121.0, 9407.5], [1123.0, 9366.0], [1125.0, 9395.0], [1129.0, 9402.5], [1097.0, 9391.0], [1093.0, 9415.0], [1115.0, 9419.75], [1111.0, 9416.333333333334], [1109.0, 9410.0], [1133.0, 9326.0], [1135.0, 9378.25], [1209.0, 9296.0], [1213.0, 9295.0], [1193.0, 9317.0], [1189.0, 9315.0], [1165.0, 9324.0], [1163.0, 9324.0], [1161.0, 9339.0], [1159.0, 9400.5], [1157.0, 9407.333333333334], [1153.0, 9427.0], [1183.0, 9335.0], [1181.0, 9403.0], [1177.0, 9309.0], [1175.0, 9384.0], [1169.0, 9323.0], [1199.0, 9323.0], [1195.0, 9387.5], [1255.0, 9214.714285714286], [1231.0, 9306.5], [1259.0, 9242.193548387098], [1263.0, 9032.75], [1261.0, 9246.666666666666], [1257.0, 9190.400000000001], [1253.0, 9281.333333333334], [1251.0, 9304.5], [1267.0, 8640.05263157895], [1265.0, 8895.346153846156], [1225.0, 9343.5], [1223.0, 9316.0], [1221.0, 9342.0], [1219.0, 9305.0], [1247.0, 9300.0], [1241.0, 9297.0], [1237.0, 9285.0], [1235.0, 9301.666666666666], [1333.0, 9361.166666666668], [1331.0, 9378.0], [1337.0, 9371.75], [1339.0, 9369.333333333334], [1341.0, 9376.333333333334], [1343.0, 9375.5], [1399.0, 9391.0], [1393.0, 9391.0], [1407.0, 9414.0], [1377.0, 9380.5], [1403.0, 9401.0], [1395.0, 9397.0], [1375.0, 9403.5], [1371.0, 9397.0], [1369.0, 9392.0], [1367.0, 9391.0], [1365.0, 9389.333333333334], [1363.0, 9404.0], [1361.0, 9382.666666666666], [1345.0, 9378.333333333334], [1347.0, 9382.0], [1351.0, 9383.666666666668], [1353.0, 9377.5], [1355.0, 9376.0], [1359.0, 9376.0], [1391.0, 9399.0], [1457.0, 9392.0], [1465.0, 6131.0], [1469.0, 7262.0], [1451.0, 9422.0], [1449.0, 9407.0], [1447.0, 9415.25], [1445.0, 9448.0], [1443.0, 9419.0], [1441.0, 9436.333333333334], [1459.0, 9383.0], [1417.0, 9388.0], [1419.0, 9383.0], [1421.0, 9403.5], [1423.0, 9384.0], [1415.0, 9430.0], [1411.0, 9407.0], [1425.0, 9402.166666666668], [1427.0, 9399.0], [1429.0, 9399.666666666666], [1431.0, 9388.5], [1435.0, 9409.666666666666], [1439.0, 9432.0], [1437.0, 9406.0], [1453.0, 9422.0], [1477.0, 9416.666666666666], [1527.0, 9438.333333333334], [1529.0, 9444.75], [1503.0, 9407.5], [1473.0, 9494.0], [1475.0, 9430.0], [1479.0, 9403.0], [1487.0, 9461.0], [1485.0, 9435.0], [1495.0, 9438.0], [1493.0, 9407.0], [1515.0, 6125.5], [1511.0, 9429.5], [1509.0, 5512.0], [1507.0, 9435.0], [1595.0, 9469.0], [1599.0, 9517.0], [1571.0, 9429.0], [1575.0, 9483.5], [1579.0, 9490.0], [1581.0, 9428.0], [1591.0, 9479.0], [1589.0, 9497.0], [1587.0, 9506.0], [1547.0, 9485.0], [1565.0, 9413.0], [1557.0, 9476.0], [1659.0, 9510.0], [1635.0, 9479.0], [1637.0, 2905.0], [1641.0, 5490.0], [1645.0, 9480.0], [1653.0, 7552.0], [1651.0, 9466.0], [1649.0, 9495.0], [1611.0, 9481.000000000002], [1609.0, 9442.5], [1607.0, 9514.0], [1601.0, 8521.0], [1629.0, 9507.0], [1627.0, 9505.0], [1625.0, 9475.0], [1623.0, 9463.0], [1701.0, 9477.0], [1703.0, 9491.0], [1725.0, 9470.095238095237], [1727.0, 9714.0], [1699.0, 9508.0], [1705.0, 9511.0], [1707.0, 9472.0], [1709.0, 9487.6], [1723.0, 9633.571428571428], [1721.0, 9249.266666666668], [1719.0, 9489.0], [1717.0, 7506.0], [1713.0, 9488.0], [1683.0, 9465.0], [1665.0, 9489.5], [1671.0, 5598.0], [1675.0, 5487.0], [1787.0, 9627.0], [1761.0, 9622.666666666666], [1765.0, 9622.0], [1771.0, 9623.0], [1773.0, 9623.0], [1789.0, 9627.5], [1785.0, 9625.0], [1783.0, 9624.0], [1779.0, 9623.0], [1777.0, 9624.0], [1743.0, 9622.0], [1731.0, 9622.0], [1729.0, 9768.0], [1759.0, 9621.0], [1753.0, 9624.0], [1751.0, 9621.0], [1747.0, 9621.0], [1745.0, 9621.0], [1825.0, 9662.0], [1855.0, 9670.0], [1831.0, 9662.0], [1827.0, 9662.0], [1835.0, 9664.0], [1837.0, 9663.0], [1851.0, 9669.0], [1843.0, 9665.666666666666], [1807.0, 9637.2], [1805.0, 9635.25], [1803.0, 9633.0], [1799.0, 9629.666666666666], [1795.0, 9628.0], [1823.0, 9656.333333333334], [1819.0, 9644.0], [1815.0, 9641.0], [1813.0, 9639.666666666666], [1839.0, 9665.0], [1919.0, 9695.0], [1917.0, 9695.0], [1889.0, 9673.0], [1893.0, 9675.0], [1891.0, 9675.0], [1897.0, 9675.0], [1913.0, 9700.333333333334], [1907.0, 9678.0], [1905.0, 9678.0], [1871.0, 9671.0], [1865.0, 9674.0], [1861.0, 9671.111111111113], [1887.0, 9671.0], [1883.0, 9673.0], [1877.0, 9671.0], [1901.0, 9676.0], [1979.0, 6953.25], [1983.0, 7312.0], [1953.0, 6951.5], [1955.0, 6949.333333333333], [1957.0, 7013.8], [1961.0, 6961.333333333333], [1973.0, 6963.0], [1971.0, 6962.0], [1945.0, 6938.8], [1947.0, 6940.666666666667], [1949.0, 6945.25], [1951.0, 6946.0], [1921.0, 9739.0], [1925.0, 9715.0], [1923.0, 9735.5], [1927.0, 9737.25], [1929.0, 7804.0], [1993.0, 7323.0], [2033.0, 7143.0], [1999.0, 6981.5], [1997.0, 6955.0], [1985.0, 7125.0], [2017.0, 7308.0], [2011.0, 6957.0], [2009.0, 7304.0], [2003.0, 6955.0], [2170.0, 7397.0], [2166.0, 7347.5], [2126.0, 7313.75], [2130.0, 7330.0], [2138.0, 7355.0], [2174.0, 7311.0], [2158.0, 7321.666666666667], [2150.0, 7305.5], [2146.0, 7326.5], [2078.0, 6966.0], [2110.0, 7298.0], [2106.0, 7300.5], [2102.0, 7306.0], [2098.0, 7131.75], [2094.0, 7263.285714285715], [2090.0, 7152.714285714285], [2086.0, 7188.666666666667], [2082.0, 7124.5], [2242.0, 7401.0], [2302.0, 7422.666666666667], [2246.0, 7372.333333333333], [2254.0, 7365.4], [2258.0, 7361.0], [2270.0, 7355.5], [2298.0, 7411.0], [2294.0, 7406.0], [2290.0, 7410.333333333333], [2286.0, 7381.0], [2282.0, 7409.4], [2274.0, 7363.0], [2178.0, 7340.0], [2194.0, 7321.5], [2202.0, 7334.5], [2230.0, 7385.666666666667], [2218.0, 7357.0], [2214.0, 7339.75], [2306.0, 7404.8], [2354.0, 7457.0], [2318.0, 7411.0], [2314.0, 7414.0], [2322.0, 7412.25], [2334.0, 7425.25], [2350.0, 7420.0], [2346.0, 7415.8], [2342.0, 7435.0], [2686.0, 1694.5], [2167.0, 7332.0], [2175.0, 7330.0], [2119.0, 7233.75], [2131.0, 7323.75], [2163.0, 7333.5], [2155.0, 7320.333333333333], [2151.0, 7316.333333333333], [2107.0, 7123.5], [2299.0, 7416.222222222223], [2295.0, 7400.0], [2303.0, 7414.0], [2243.0, 7383.25], [2259.0, 7377.0], [2267.0, 7388.666666666666], [2271.0, 7396.0], [2287.0, 7402.0], [2283.0, 7388.75], [2279.0, 7402.166666666666], [2275.0, 7392.111111111111], [2179.0, 7346.5], [2195.0, 7343.0], [2199.0, 7332.5], [2203.0, 7374.0], [2231.0, 7333.0], [2223.0, 7327.0], [2215.0, 7356.0], [2211.0, 7320.0], [2355.0, 7427.125000000001], [2311.0, 7403.0], [2351.0, 7429.0], [2327.0, 7434.5], [2323.0, 7425.5], [2331.0, 7432.5], [2347.0, 7436.75], [2343.0, 7430.0], [2687.0, 1697.5], [2707.0, 4278.767676767676], [1.0, 4.961538461538463]], "isOverall": false, "label": "create ", "isController": false}, {"data": [[718.3081999999985, 2401.4030999999904]], "isOverall": false, "label": "create -Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2797.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 117500.0, "minX": 1.59814284E12, "maxY": 163000.0, "series": [{"data": [[1.59814284E12, 163000.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59814284E12, 117500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59814284E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2401.4030999999904, "minX": 1.59814284E12, "maxY": 2401.4030999999904, "series": [{"data": [[1.59814284E12, 2401.4030999999904]], "isOverall": false, "label": "create ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59814284E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2401.114100000002, "minX": 1.59814284E12, "maxY": 2401.114100000002, "series": [{"data": [[1.59814284E12, 2401.114100000002]], "isOverall": false, "label": "create ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59814284E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.398499999999974, "minX": 1.59814284E12, "maxY": 6.398499999999974, "series": [{"data": [[1.59814284E12, 6.398499999999974]], "isOverall": false, "label": "create ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59814284E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.59814284E12, "maxY": 10614.0, "series": [{"data": [[1.59814284E12, 10614.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59814284E12, 2.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59814284E12, 2.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59814284E12, 2.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59814284E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59814284E12, 459.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59814284E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 16.0, "maxY": 9387.0, "series": [{"data": [[515.0, 7345.0], [187.0, 2796.0], [737.0, 10.0], [906.0, 17.0], [235.0, 1758.0], [942.0, 325.0], [993.0, 24.0], [16.0, 3019.0], [1034.0, 570.5], [1178.0, 25.0], [1179.0, 573.0], [99.0, 4272.0], [1979.0, 9387.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1979.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 16.0, "maxY": 9387.0, "series": [{"data": [[515.0, 7345.0], [187.0, 2796.0], [737.0, 10.0], [906.0, 17.0], [235.0, 1758.0], [942.0, 324.5], [993.0, 24.0], [16.0, 3019.0], [1034.0, 570.0], [1178.0, 25.0], [1179.0, 573.0], [99.0, 4272.0], [1979.0, 9387.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1979.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.59814284E12, "maxY": 166.66666666666666, "series": [{"data": [[1.59814284E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59814284E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.59814284E12, "maxY": 166.66666666666666, "series": [{"data": [[1.59814284E12, 166.66666666666666]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59814284E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.59814284E12, "maxY": 166.66666666666666, "series": [{"data": [[1.59814284E12, 166.66666666666666]], "isOverall": false, "label": "create -success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59814284E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.59814284E12, "maxY": 166.66666666666666, "series": [{"data": [[1.59814284E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59814284E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

